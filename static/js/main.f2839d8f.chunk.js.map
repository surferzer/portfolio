{"version":3,"sources":["Proyectos.js","App.js","serviceWorker.js","index.js"],"names":["Proyectos","className","href","title","src","alt","tittle","React","Component","App","props","state","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAuCeA,G,uLAnCP,OACA,yBAAKC,UAAU,SACX,yBAAKA,UAAU,UACf,uBAAGC,KAAK,iDAAiDC,MAAM,UAC/D,yBAAKC,IAAI,GAAGC,IAAI,aAGZ,yBAAKJ,UAAU,cAChB,uBAAGC,KAAK,sDAAsDI,OAAO,cACrE,yBAAKF,IAAI,GAAGC,IAAI,eADhB,MAIJ,yBAAKJ,UAAU,kBACX,uBAAGC,KAAK,GAAGI,OAAO,kBAClB,yBAAKF,IAAI,GAAGC,IAAI,mBADhB,MAIJ,yBAAKJ,UAAU,YACX,uBAAGC,KAAK,GAAGI,OAAO,YAClB,yBAAKF,IAAI,GAAGC,IAAI,aADhB,MAIJ,yBAAKJ,UAAU,cACX,uBAAGC,KAAK,yEAAyEI,OAAO,cACxF,yBAAKF,IAAI,GAAGC,IAAI,eADhB,MAIJ,yBAAKJ,UAAW,YACZ,sCAAW,uBAAGC,KAAK,0BAAR,2BACX,uCAAY,uBAAGA,KAAK,gCAAR,uC,GA/BHK,IAAMC,YCqCfC,E,YAhCf,WAAYC,GAAQ,IAAD,8BACnB,4CAAMA,KAEDC,MAAQ,CAAEC,KAAM,IAHF,E,sEASjB,OAEE,yBAAKX,UAAU,OAAf,KACG,yBAAKG,IAAI,+EAA+EH,UAAU,SAASI,IAAI,oBAEtH,yBAAKJ,UAAU,WACf,mDACA,oDAIA,yBAAKA,UAAU,aACb,kBAAC,EAAD,Y,GAtBgBM,IAAMC,WCMJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f2839d8f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Proyectos extends React.Component {\r\n    render(){\r\n        return(\r\n        <div className='vista'>\r\n            <div className='cypher'>\r\n            <a href=\"https://surferzer.github.io/GDL003-cipher/src/\" title=\"Cipher\">\r\n            <img src=\"\" alt=\"Cipher\"/></a>\r\n                </div>\r\n\r\n                <div className='dataLovers'>\r\n               <a href=\"https://surferzer.github.io/GDL003-data-lovers/src/\" tittle=\"dataLovers\">\r\n               <img src=\"\" alt=\"dataLovers\"/> </a>\r\n           </div>\r\n\r\n           <div className='movieChallenge'>\r\n               <a href=\"\" tittle=\"movieChallenge\">\r\n               <img src=\"\" alt=\"movieChallenge\"/> </a>\r\n           </div>\r\n\r\n           <div className='labNotes'>\r\n               <a href=\"\" tittle=\"labNotes\">\r\n               <img src=\"\" alt=\"labNotes\"/> </a>\r\n           </div>\r\n\r\n           <div className='ciboulette'>\r\n               <a href=\"https://lauramayavayahayaraya.github.io/GDL003-Burger-Queen-Front-End/\" tittle=\"ciboulette\">\r\n               <img src=\"\" alt=\"ciboulette\"/> </a>\r\n           </div>\r\n\r\n           <div className= 'contacto'>\r\n               <h2>Email: <a href='mafernandazr@gmail.com'>mafernandazr@gmail.com</a></h2>\r\n               <h2>Github: <a href='https://github.com/surferzer'>https://github.com/surferzer</a></h2>\r\n           </div>\r\n       </div>\r\n       );\r\n   }\r\n};\r\nexport default Proyectos;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Proyectos from './Proyectos.js'\n\n\nclass App extends React.Component {\nconstructor(props) {\nsuper(props)\n\nthis.state = { item: [] }\n\n}\n\n\nrender(){\n  return (\n   // <div className=\"contededor\">\n    <div className=\"App\">\n     / <img src=\"https://i.pinimg.com/originals/c8/96/97/c896970cd258023e93135f91c14524c3.jpg\" className=\"imagen\" alt=\"imagen de fondo\"/>\n     \n<div className=\"titulos\">\n<h1>Fernanda Zerme√±o</h1>\n<h2>Front-end Developer</h2>\n\n</div>\n\n<div className=\"proyectos\">\n  <Proyectos />\n\n  </div>\n\n</div>\n     \n\n\n//</div>\n  )}}  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}